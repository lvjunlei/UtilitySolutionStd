// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Utility.Authority.Infrastructure;

namespace Utility.Authority.Infrastructure.Migrations
{
    [DbContext(typeof(MySqlDbContext))]
    [Migration("20190531010131_lj20190531")]
    partial class lj20190531
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Utility.Authority.Domain.Deptments.Department", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Menus.Menu", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsLeaf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("ParentId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<int>("Sequence");

                    b.Property<string>("System")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Menus.MenuButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<byte[]>("MenuId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuButton");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Roles.Role", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Roles.RoleMenu", b =>
                {
                    b.Property<byte[]>("RoleId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("MenuId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Roles.RoleMenuButton", b =>
                {
                    b.Property<byte[]>("RoleId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<int>("MenuButtonId");

                    b.HasKey("RoleId", "MenuButtonId");

                    b.HasIndex("MenuButtonId");

                    b.ToTable("RoleMenuButton");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Roles.UserRole", b =>
                {
                    b.Property<byte[]>("UserId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("RoleId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Users.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("DepartmentId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<bool>("IsActived");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("LastAlterPasswordTime");

                    b.Property<DateTime?>("LastLoginFailureTime");

                    b.Property<int>("LoginFailureTimes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Menus.Menu", b =>
                {
                    b.HasOne("Utility.Authority.Domain.Menus.Menu", "Parent")
                        .WithMany("Chidren")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Utility.Authority.Domain.Menus.MenuButton", b =>
                {
                    b.HasOne("Utility.Authority.Domain.Menus.Menu", "Menu")
                        .WithMany("MenuButtons")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Utility.Authority.Domain.Roles.RoleMenu", b =>
                {
                    b.HasOne("Utility.Authority.Domain.Menus.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Utility.Authority.Domain.Roles.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Utility.Authority.Domain.Roles.RoleMenuButton", b =>
                {
                    b.HasOne("Utility.Authority.Domain.Menus.MenuButton", "MenuButton")
                        .WithMany("RoleMenuButtons")
                        .HasForeignKey("MenuButtonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Utility.Authority.Domain.Roles.Role", "Role")
                        .WithMany("RoleMenuButtons")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Utility.Authority.Domain.Roles.UserRole", b =>
                {
                    b.HasOne("Utility.Authority.Domain.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Utility.Authority.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Utility.Authority.Domain.Users.User", b =>
                {
                    b.HasOne("Utility.Authority.Domain.Deptments.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
